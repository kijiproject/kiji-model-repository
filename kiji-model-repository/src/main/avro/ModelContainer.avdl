/**
 * (c) Copyright 2013 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@namespace("org.kiji.modelrepo.avro")
/**
 * Avro records for storing model container entries.
 */
protocol KijiModelContainers {

  /**
   * Enum to describe when the parameter is used.
   */
  enum ParameterScope {
    /** Parameter is only used at setup. */
    SETUP,
    /** Parameter is used for runtime scoring. */
    SCORING,
    /** Parameter is used at setup and scoring. */
    SETUP_AND_SCORING
  }

  /**
   * Record that describes the type and usage of a parameter.
   */
  record ParameterDescription {
    /** Type of the parameter, e.g. "int" */
    string type;

    /** User-friendly description of the parameter. */
    string description;

    /** Whether or not the parameter is required */
    boolean required;

    /** String representation of the default value (if not required) */
    union { null, string } default_value = null;

    /** Whether the parameter is used at setup or runtime (or both) */
    ParameterScope scope;
  }

  /** Record representing everything needed to score a model. */
  record ScoringParameters {
    /** Fully qualified class of the ScoreFunction. */
    union { null, string } score_function_class = null;

    /**
     * Configuration parameters which will be passed to the KijiFreshnessPolicy and ScoreFunction.
     */
    map<string> parameters = {};

    /** Optional descriptions of the parameters. Map key is the parameter name. */
    map<ParameterDescription> descriptions = {};

    /** KijiURI of the table from which data is provided to the ScoreFunction. */
    union { null, string } table_uri = null;

    /** Column name to which the ScoreFunction should be attached. */
    union { null, string } attached_column = null;
  }

  /**
   * Record representing information needed to run a KijiExpress job. Jar arguments to the express
   * job command are provided externally to this record.
   */
  record ExpressJob {
    /**
     * Fully qualified class name of the Job class to run. Job class must include a constructor
     * which requires only a Scalding Args object, to be instantiated via reflection.
     */
    union { null, string } job_class = null;

    /** Scalding Arguments. */
    array<string> scalding_args = [];

    /** JVM Arguments. */
    array<string> jvm_args = [];
  }

  /**
   * Record representing information needed to run a KijiProducer job. Jar arguments are provided
   * externally to this record.
   */
  record ProducerJob {
    /** Fully qualified class name of the KijiProducer class to run. */
    union { null, string } producer_class = null;

    /** Number of threads to run in parallel per map task. */
    union { null, int } num_threads = 1;
  }

  /**
   * Record representing information needed to run a KijiGatherer job. Jar arguments are provided
   * externally to this record.
   */
  record GathererJob {
    /** Fully qualified class name of the KijiGatherer class to run. */
    union { null, string } gatherer_class = null;

    /** Fully qualified class name of the combiner to use. (optional) */
    union { null, string } combiner_class = null;

    /** Fully qualified class name of the reducer to use. (optional) */
    union { null, string } reducer_class = null;
  }

  /**
   * Record representing information needed to run a KijiPivot job. Jar arguments are provided
   * externally to this record.
   */
  record PivotJob {
    /** Fully qualified class name of the KijiPivot class to run. */
    union { null, string } pivot_class = null;
  }

  /**
   * Record representing information needed to run a generic MapReduce job. Jar arguments are
   * provided externally to this record.
   */
  record GenericMRJob {
    /** Fully qualified class name of the KijiMapper class to run. */
    union { null, string } mapper_class = null;

    /**
     * Fully qualified class name of the Combiner class (must be a subclass of KijiReducer) to run.
     * (optional)
     */
    union { null, string } combiner_class = null;

    /** Fully qualified class name of the KijiReducer class to run. (optional) */
    union { null, string } reducer_class = null;
  }

  /** Enumeration of possible KijiMapReduce job types. */
  enum MRJobType {
    PRODUCER, GATHERER, PIVOT, GENERIC
  }

  /** Record representing information needed to run a KijiMapReduce job. */
  record MapReduceJob {
    /** Type of the KijiMapReduce job. */
    MRJobType job_type;

    /** Optional parameters for a KijiProducer job. */
    union { null, ProducerJob } producer_job = null;

    /** Optional parameters for a KijiGatherer job. */
    union { null, GathererJob } gatherer_job = null;

    /** Optional parameters for a KijiPivot job. */
    union { null, PivotJob } pivot_job = null;

    /** Optional parameters for a KijiMapReduce job. */
    union { null, GenericMRJob } mapreduce_job = null;

    /** Input specification as defined by org.kiji.mapreduce.tools.framework.JobTool */
    union { null, string } input_spec = null;

    /** Output specification as defined by org.kiji.mapreduce.tools.framework.JobTool */
    union { null, string } output_spec = null;

    /**
     * KeyValueStore specification XML as defined by
     * org.kiji.mapreduce.kvstore.impl.XmlKeyValueStoreParser
     */
    union { null, string } kvstore_xml = null;
  }

  /** Record representing information needed to run a Bash command. */
  record BashCommand {
    /** The Bash command itself. */
    union { null, string } command = null;

    /** TODO: Does this need other information, or should we just assume everything is in place? */
  }

  /** Enumeration of possible training job types. */
  enum TrainingJobType {
    EXPRESS, KIJIMR, BASH
  }

  /** Record representing information needed to train a model. */
  record TrainingParameters {
    /** Type of the training job. */
    TrainingJobType job_type;

    /** Optional parameters for a KijiExpress job. */
    union { null, ExpressJob } express_job = null;

    /** Optional parameters for a KijiMapReduce job. */
    union { null, MapReduceJob } mapreduce_job = null;

    /** Optional parameters for a Bash command. */
    union { null, BashCommand } bash_command = null;
  }

  /** Record representing information needed to train and score a model. */
  record KijiModelContainer {
    /** Version string, for future compatibility. */
    string record_version = null;

    /** Name of model. */
    union { null, string } model_name = null;

    /** Version of model. */
    union { null, string } model_version = null;

    /** Information about how to train this model. */
    union { null, TrainingParameters } training_parameters = null;

    /** Information about how to score this model. */
    union { null, ScoringParameters } scoring_parameters = null;
  }
}
