/**
 * (c) Copyright 2013 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@namespace("org.kiji.modelrepo.avro")
/**
 * Avro records for storing model container entries.
 */
protocol KijiModelContainers {

  /** Record representing everything needed to score a model. */
  record ScoringParameters {
    /** Version string, for future compatibility. */
    string record_version;

    /** Fully qualified class of the ScoreFunction. */
    union { null, string } score_function_class = null;

    /**
     * Configuration parameters which will be passed to the KijiFreshnessPolicy and ScoreFunction.
     */
    map<string> parameters = {};

    /** KijiURI of the table from which data is provided to the ScoreFunction. */
    union { null, string } table_uri = null;

    /** Column name to which the ScoreFunction should be attached. */
    union { null, string } attached_column = null;
  }

  /** Enumeration of possible training job types. */
  enum TrainingJobType {
    EXPRESS, KIJIMR, BASH
  }

  /**
   * Record representing information needed to run a KijiExpress job. Jar arguments to the express
   * job command are provided externally to this record.
   */
  record ExpressJob {
    /** Version string, for future compatibility. */
    string record_version;

    /** Fully qualified class name of the Job class to run. */
    union { null, string } job_class = null;

    /** Scalding Arguments. */
    array<string> scalding_args = [];

    /** JVM Arguments. */
    array<string> jvm_args = [];
  }

  /** Record representing information needed to run a KijiMapReduce job. */
  record MapReduceJob {
    /** Version string, for future compatibility. */
    string record_version;

    /** Input specification as defined by org.kiji.mapreduce.tools.framework.JobTool */
    union { null, string } input_spec = null;

    /** Output specification as defined by org.kiji.mapreduce.tools.framework.JobTool */
    union { null, string } output_spec = null;

    /**
     * KeyValueStore specification XML as defined by
     * org.kiji.mapreduce.kvstore.impl.XmlKeyValueStoreParser
     */
    union { null, string } kvstore_xml = null;
  }

  /** Record representing information needed to run a Bash command. */
  record BashCommand {
    /** Version string, for future compatibility. */
    string record_version;

    /** The Bash command itself. */
    union { null, string } command = null;

    /** TODO: Does this need other information, or should we just assume everything is in place? */
  }

  /** Record representing information needed to train a model. */
  record TrainingParameters {
    /** Version string, for future compatibility. */
    string record_version;

    /** Type of the training job. */
    TrainingJobType job_type;

    /** Optional parameters for a KijiExpress job. */
    union { null, ExpressJob } express_job = null;

    /** Optional parameters for a KijiMapReduce job. */
    union { null, MapReduceJob } mapreduce_job = null;

    /** Optional parameters for a Bash command. */
    union { null, BashCommand } bash_command = null;
  }

  /** Record representing information needed to train and score a model. */
  record KijiModelContainer {
    /** Version string, for future compatibility. */
    string record_version = null;

    /** Name of model. */
    union { null, string } model_name = null;

    /** Version of model. */
    union { null, string } model_version = null;

    /** Information about how to train this model. */
    union { null, TrainingParameters } training_parameters = null;

    /** Information about how to score this model. */
    union { null, ScoringParameters } scoring_parameters = null;
  }
}
