/**
 * (c) Copyright 2014 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.kiji.modelrepo.tools;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.Map;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.io.Files;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.hadoop.fs.Path;
import org.junit.Test;

import org.kiji.modelrepo.avro.KijiModelContainer;
import org.kiji.schema.KijiColumnName;
import org.kiji.schema.KijiURI;
import org.kiji.schema.layout.KijiTableLayout;
import org.kiji.schema.layout.KijiTableLayouts;
import org.kiji.schema.tools.BaseTool;
import org.kiji.schema.tools.KijiToolTest;
import org.kiji.schema.util.FromJson;
import org.kiji.schema.util.InstanceBuilder;
import org.kiji.schema.util.Resources;
import org.kiji.scoring.lib.JpmmlScoreFunction;

public class TestPmmlModelRepoTool extends KijiToolTest {
  /**
   * Creates a test table and returns the uri of the table.
   *
   * @return the uri of the table.
   */
  public KijiURI generateTableUri() throws IOException {
    // Setup the test table.
    final KijiTableLayout simpleLinearRegressionLayout =
        KijiTableLayouts.getTableLayout("simple-linear-regression.json");
    new InstanceBuilder(getKiji())
        .withTable(simpleLinearRegressionLayout.getName(), simpleLinearRegressionLayout)
        .build();

    return KijiURI.newBuilder(getKiji().getURI())
        .withTableName(simpleLinearRegressionLayout.getName())
        .build();
  }

  /**
   * Loads a pmml file from test resources and writes it to a temporary file.
   *
   * @return the path to the temporary pmml file.
   */
  public Path generatePmml() throws IOException {
    // Write test PMML file to a temporary location.
    final File pmmlModelFile = File.createTempFile(
        TestPmmlModelRepoTool.class.getName() + "-simple-linear-regression",
        ".xml"
    );
    final String pmmlModelString =
        IOUtils.toString(Resources.openSystemResource("simple-linear-regression.xml"));
    pmmlModelFile.deleteOnExit();
    final PrintWriter pmmlPrintWriter = new PrintWriter(pmmlModelFile);
    try {
      pmmlPrintWriter.println(pmmlModelString);
    } finally {
      pmmlPrintWriter.flush();
      pmmlPrintWriter.close();
    }

    return new Path("file://" + pmmlModelFile.getAbsolutePath());
  }

  /**
   * Creates a temporary output directory and returns a path to an output file that is guaranteed to
   * not exist.
   *
   * @return a path to write a model container to.
   */
  public String generateOutputPath() {
    // Create a temporary output location.
    final File modelContainer = Files.createTempDir();

    return String.format("%s/linearreg.json", modelContainer.getAbsolutePath());
  }

  /**
   * Validate a model container generated by the model-repo pmml tool.
   *
   * @param kijiUri expected to be used in the model container.
   * @param modelFile identifying the output model container.
   * @param modelName expected to be used in the model container.
   * @param modelVersion expected to be used in the model container.
   * @param predictorColumn expected to be used in the model container.
   * @param resultColumn expected to be used in the model container.
   * @param resultRecordName expected to be used in the model container.
   * @param modelContainerPath expected to be used in the model container.
   */
  // CSOFF: ParameterNumber
  public void validateModelContainer(
      final KijiURI kijiUri,
      final Path modelFile,
      final String modelName,
      final String modelVersion,
      final KijiColumnName predictorColumn,
      final KijiColumnName resultColumn,
      final String resultRecordName,
      final String modelContainerPath
  ) throws IOException {
    // CSON: ParameterNumber
    // Validate the resulting model container.
    final File modelContainerFile = new File(modelContainerPath);
    assertTrue(
        "Output model container file didn't get created!",
        modelContainerFile.exists() && modelContainerFile.isFile()
    );

    // Load the resulting model container.
    final KijiModelContainer container = (KijiModelContainer) FromJson.fromJsonString(
        FileUtils.readFileToString(modelContainerFile),
        KijiModelContainer.getClassSchema()
    );

    // Check all of the key/value pairs.
    final Map<String, String> modelParameters = container.getParameters();
    modelParameters.containsKey(JpmmlScoreFunction.MODEL_FILE_PARAMETER);
    modelParameters.containsKey(JpmmlScoreFunction.MODEL_NAME_PARAMETER);
    modelParameters.containsKey(JpmmlScoreFunction.PREDICTOR_COLUMN_PARAMETER);
    modelParameters.containsKey(JpmmlScoreFunction.RESULT_RECORD_PARAMETER);

    assertEquals(
        modelFile.toString(),
        modelParameters.get(JpmmlScoreFunction.MODEL_FILE_PARAMETER)
    );
    assertEquals(
        modelName,
        modelParameters.get(JpmmlScoreFunction.MODEL_NAME_PARAMETER)
    );
    assertEquals(
        predictorColumn.getName(),
        modelParameters.get(JpmmlScoreFunction.PREDICTOR_COLUMN_PARAMETER)
    );
    assertEquals(
        resultRecordName,
        modelParameters.get(JpmmlScoreFunction.RESULT_RECORD_PARAMETER)
    );
    assertEquals(
        resultColumn.getName(),
        container.getColumnName()
    );
    assertEquals(
        modelName,
        container.getModelName()
    );
    assertEquals(
        modelVersion,
        container.getModelVersion()
    );
    assertEquals(
        JpmmlScoreFunction.class.getName(),
        container.getScoreFunctionClass()
    );
    assertEquals(
        kijiUri.toString(),
        container.getTableUri()
    );
  }

  private static final String MODEL_NAME = "linearreg";
  private static final String MODEL_VERSION = "0.1.0";
  private static final KijiColumnName PREDICTOR_COLUMN = new KijiColumnName("model", "predictor");
  private static final KijiColumnName RESULT_COLUMN = new KijiColumnName("model", "predicted");
  private static final String RESULT_RECORD_NAME = "SimpleLinearRegressionPredicted";

  /**
   * Validate that with correctly specified flags the model-repo pmml tool can generate a model
   * container.
   */
  @Test
  public void testGenerateModelContainer() throws Exception {
    // Setup environment.
    final KijiURI kijiUri = generateTableUri();
    final Path modelFile = generatePmml();
    final String modelName = MODEL_NAME;
    final String modelVersion = MODEL_VERSION;
    final KijiColumnName predictorColumn = PREDICTOR_COLUMN;
    final KijiColumnName resultColumn = RESULT_COLUMN;
    final String resultRecordName = RESULT_RECORD_NAME;
    final String modelContainerPath = generateOutputPath();

    // Call the tool.
    final int status = runTool(new PmmlModelRepoTool(),
        String.format("--table=%s", kijiUri),
        String.format("--model-file=%s", modelFile),
        String.format("--model-name=%s", modelName),
        String.format("--model-version=%s", modelVersion),
        String.format("--predictor-column=%s", predictorColumn.getName()),
        String.format("--result-column=%s", resultColumn.getName()),
        String.format("--result-record-name=%s", resultRecordName),
        String.format("--model-container=%s", modelContainerPath)
    );
    assertEquals(BaseTool.SUCCESS, status);

    // Validate environment.
    validateModelContainer(
        kijiUri,
        modelFile,
        modelName,
        modelVersion,
        predictorColumn,
        resultColumn,
        resultRecordName,
        modelContainerPath
    );
  }

  public void testValidateFlagExistence(final String flag) throws Exception {
    // Setup environment.
    final KijiURI kijiUri = generateTableUri();
    final Path modelFile = generatePmml();
    final String modelContainerPath = generateOutputPath();

    final Map<String, String> possibleFlags = Maps.newHashMap();
    possibleFlags.put("--table", kijiUri.toString());
    possibleFlags.put("--model-file", modelFile.toString());
    possibleFlags.put("--model-name", MODEL_NAME);
    possibleFlags.put("--model-version", MODEL_VERSION);
    possibleFlags.put("--predictor-column", PREDICTOR_COLUMN.getName());
    possibleFlags.put("--result-column", RESULT_COLUMN.getName());
    possibleFlags.put("--result-record-name", RESULT_RECORD_NAME);
    possibleFlags.put("--model-container", modelContainerPath);

    final List<String> flags = Lists.newArrayList();
    for (Map.Entry<String, String> entry : possibleFlags.entrySet()) {
      if (!entry.getKey().equals(flag)) {
        flags.add(String.format("%s=%s", entry.getKey(), entry.getValue()));
      }
    }

    final int status = runTool(new PmmlModelRepoTool(), flags.toArray(new String[flags.size()]));
    assertEquals(BaseTool.FAILURE, status);
    assertEquals(String.format("Missing arguments: %s\n", flag), mToolOutputStr);
  }

  /**
   * Validate check that ensures that the "--table" flag was specified.
   */
  @Test
  public void testValidateTableFlagExistence() throws Exception {
    testValidateFlagExistence("--table");
  }

  /**
   * Validate check that ensures that the "--model-file" flag was specified.
   */
  @Test
  public void testValidateModelFileFlagExistence() throws Exception {
    testValidateFlagExistence("--model-file");
  }

  /**
   * Validate check that ensures that the "--model-name" flag was specified.
   */
  @Test
  public void testValidateModelNameFlagExistence() throws Exception {
    testValidateFlagExistence("--model-name");
  }

  /**
   * Validate check that ensures that the "--model-version" flag was specified.
   */
  @Test
  public void testValidateModelVersionFlagExistence() throws Exception {
    testValidateFlagExistence("--model-version");
  }

  /**
   * Validate check that ensures that the "--predictor-column" flag was specified.
   */
  @Test
  public void testValidatePredictorColumnFlagExistence() throws Exception {
    testValidateFlagExistence("--predictor-column");
  }

  /**
   * Validate check that ensures that the "--result-column" flag was specified.
   */
  @Test
  public void testValidateResultColumnFlagExistence() throws Exception {
    testValidateFlagExistence("--result-column");
  }

  /**
   * Validate check that ensures that the "--result-record-name" flag was specified.
   */
  @Test
  public void testValidateResultRecordNameFlagExistence() throws Exception {
    testValidateFlagExistence("--result-record-name");
  }

  /**
   * Validate check that ensures that the provided pmml file exists.
   */
  @Test
  public void testValidateFileExistence() throws Exception {
    // Setup environment.
    final KijiURI kijiUri = generateTableUri();
    final String modelContainerPath = generateOutputPath();

    // Test missing pmml file.
    final File emptyDir = Files.createTempDir();
    final Path modelFile = new Path(
        String.format("%s/non-existent-file.xml", emptyDir.getAbsolutePath())
    );

    try {
      final int status = runTool(new PmmlModelRepoTool(),
          String.format("--table=%s", kijiUri),
          String.format("--model-file=%s", modelFile),
          String.format("--model-name=%s", MODEL_NAME),
          String.format("--model-version=%s", MODEL_VERSION),
          String.format("--predictor-column=%s", PREDICTOR_COLUMN.getName()),
          String.format("--result-column=%s", RESULT_COLUMN.getName()),
          String.format("--result-record-name=%s", RESULT_RECORD_NAME),
          String.format("--model-container=%s", modelContainerPath)
      );
      assertEquals(BaseTool.FAILURE, status);
    } catch (IllegalArgumentException iae) {
      assertEquals(String.format("%s is not a file.", modelFile), iae.getMessage());
      return;
    }

    fail();
  }

  /**
   * Validate check that ensures that the provided pmml file is not a directory.
   */
  @Test
  public void testValidateWrongModelFile() throws Exception {
    // Setup environment.
    final KijiURI kijiUri = generateTableUri();
    final String modelContainerPath = generateOutputPath();

    // Test pmml directory.
    final File emptyDir = Files.createTempDir();
    final Path modelFile = new Path(emptyDir.getAbsolutePath());

    try {
      final int status = runTool(new PmmlModelRepoTool(),
          String.format("--table=%s", kijiUri),
          String.format("--model-file=%s", modelFile),
          String.format("--model-name=%s", MODEL_NAME),
          String.format("--model-version=%s", MODEL_VERSION),
          String.format("--predictor-column=%s", PREDICTOR_COLUMN.getName()),
          String.format("--result-column=%s", RESULT_COLUMN.getName()),
          String.format("--result-record-name=%s", RESULT_RECORD_NAME),
          String.format("--model-container=%s", modelContainerPath)
      );
      assertEquals(BaseTool.FAILURE, status);
    } catch (IllegalArgumentException iae) {
      assertEquals(String.format("%s is not a file.", modelFile), iae.getMessage());
      return;
    }

    fail();
  }

  /**
   * Validate check that ensures that the provided model container output path doesn't already
   * exist.
   */
  @Test
  public void testValidateExistingModelContainer() throws Exception {
    // Setup environment.
    final KijiURI kijiUri = generateTableUri();
    final Path modelFile = generatePmml();

    // Test pmml directory.
    final File emptyDir = Files.createTempDir();
    final String modelContainerPath = emptyDir.getAbsolutePath();

    try {
      final int status = runTool(new PmmlModelRepoTool(),
          String.format("--table=%s", kijiUri),
          String.format("--model-file=%s", modelFile),
          String.format("--model-name=%s", MODEL_NAME),
          String.format("--model-version=%s", MODEL_VERSION),
          String.format("--predictor-column=%s", PREDICTOR_COLUMN.getName()),
          String.format("--result-column=%s", RESULT_COLUMN.getName()),
          String.format("--result-record-name=%s", RESULT_RECORD_NAME),
          String.format("--model-container=%s", modelContainerPath)
      );
      assertEquals(BaseTool.FAILURE, status);
    } catch (IllegalArgumentException iae) {
      assertEquals(
          String.format("Output location %s already exists.", modelContainerPath),
          iae.getMessage()
      );
      return;
    }

    fail();
  }

  /**
   * Validate check that ensures provided Kiji table exists.
   */
  @Test
  public void testValidateTableExistence() throws Exception {
    // Setup environment.
    final KijiURI kijiUri = KijiURI.newBuilder(getKiji().getURI())
        .withTableName("nonexistent")
        .build();
    final Path modelFile = generatePmml();
    final String modelContainerPath = generateOutputPath();

    try {
      final int status = runTool(new PmmlModelRepoTool(),
          String.format("--table=%s", kijiUri),
          String.format("--model-file=%s", modelFile),
          String.format("--model-name=%s", MODEL_NAME),
          String.format("--model-version=%s", MODEL_VERSION),
          String.format("--predictor-column=%s", PREDICTOR_COLUMN.getName()),
          String.format("--result-column=%s", RESULT_COLUMN.getName()),
          String.format("--result-record-name=%s", RESULT_RECORD_NAME),
          String.format("--model-container=%s", modelContainerPath)
      );
      assertEquals(BaseTool.FAILURE, status);
    } catch (IllegalArgumentException iae) {
      assertEquals(
          String.format("%s does not exist.", kijiUri.toString()),
          iae.getMessage()
      );
      return;
    }

    fail();
  }

  /**
   * Validate check that ensures provided predictor column exists.
   */
  @Test
  public void testValidatePredictorColumnExistence() throws Exception {
    // Setup environment.
    final KijiURI kijiUri = generateTableUri();
    final Path modelFile = generatePmml();
    final String modelContainerPath = generateOutputPath();

    final KijiColumnName nonExistentColumn = new KijiColumnName("foo", "bar");

    try {
      final int status = runTool(new PmmlModelRepoTool(),
          String.format("--table=%s", kijiUri),
          String.format("--model-file=%s", modelFile),
          String.format("--model-name=%s", MODEL_NAME),
          String.format("--model-version=%s", MODEL_VERSION),
          String.format("--predictor-column=%s", nonExistentColumn.getName()),
          String.format("--result-column=%s", RESULT_COLUMN.getName()),
          String.format("--result-record-name=%s", RESULT_RECORD_NAME),
          String.format("--model-container=%s", modelContainerPath)
      );
      assertEquals(BaseTool.FAILURE, status);
    } catch (IllegalArgumentException iae) {
      assertEquals(
          String.format(
              "Table %s is missing the provided predictor column %s.",
              kijiUri.toString(),
              nonExistentColumn.getName()
          ),
          iae.getMessage()
      );
      return;
    }

    fail();
  }

  /**
   * Validate check that ensures provided result column exists.
   */
  @Test
  public void testValidateResultColumnExistence() throws Exception {
    // Setup environment.
    final KijiURI kijiUri = generateTableUri();
    final Path modelFile = generatePmml();
    final String modelContainerPath = generateOutputPath();

    final KijiColumnName nonExistentColumn = new KijiColumnName("foo", "bar");

    try {
      final int status = runTool(new PmmlModelRepoTool(),
          String.format("--table=%s", kijiUri),
          String.format("--model-file=%s", modelFile),
          String.format("--model-name=%s", MODEL_NAME),
          String.format("--model-version=%s", MODEL_VERSION),
          String.format("--predictor-column=%s", PREDICTOR_COLUMN.getName()),
          String.format("--result-column=%s", nonExistentColumn.getName()),
          String.format("--result-record-name=%s", RESULT_RECORD_NAME),
          String.format("--model-container=%s", modelContainerPath)
      );
      assertEquals(BaseTool.FAILURE, status);
    } catch (IllegalArgumentException iae) {
      assertEquals(
          String.format(
              "Table %s is missing the provided result column %s.",
              kijiUri.toString(),
              nonExistentColumn.getName()
          ),
          iae.getMessage()
      );
      return;
    }

    fail();
  }
}
